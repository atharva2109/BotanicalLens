#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('plantrecognition:server');
var http = require('http');
var database = require('../databases/plant-recognition')
const socketIo = require("socket.io");
const Message = require("../models/message");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = socketIo(server);

// Real-time chat with socket.io
io.on('connection', async (socket) => {
  console.log('A user connected');

  socket.on('join', async ({ username, sightingId }) => {
    console.log(`${username} joined the room for sighting ${sightingId}`);
    socket.sightingId = sightingId;
    socket.join(sightingId);

    // Fetch chat history for the specific sightingId
    try {
      const messages = await Message.find({ sightingId: sightingId }).sort({ timestamp: 1 }).limit(50);
      socket.emit('chat history', messages);
    } catch (error) {
      console.error('Error fetching chat history:', error);
    }

    const joinMessage = {
      username: "System",
      message: `You have joined the room :)`,
      timestamp: new Date().toISOString(),
      sightingId
    };
    io.to(sightingId).emit('chat message', joinMessage);
  });

  socket.on('chat message', async (data) => {
    const { username, message, timestamp, sightingId } = data;
    const newMessage = new Message({ username, message, timestamp, sightingId });

    try {
      await newMessage.save();
      io.to(sightingId).emit('chat message', { username, message, timestamp, sightingId });
    } catch (error) {
      console.error('Error saving message to DB:', error);
    }
  });

  socket.on('disconnect', () => {
    console.log('A user has disconnected');
    const disconnectMessage = {
      username: "System",
      message: `A user has left the room`,
      timestamp: new Date().toISOString(),
      sightingId: socket.sightingId
    };
    io.to(socket.sightingId).emit('chat message', disconnectMessage);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

app.post('/addplant', (req, res) => {
  const newPlant = new Plant({
    userId: req.body.userId,
    plantName: req.body.plantName,
    plantDescription: req.body.plantDescription,
    category: req.body.category,
    chooseDate: req.body.chooseDate,
    pickedLocation: req.body.pickedLocation,
    uploadedImage: req.body.uploadedImage
  });

  // Save the new plant to the database
  newPlant.save()
      .then(() => res.send('success page')) // send a success message
      .catch((err) => {
        console.error(err);
        res.status(500).send('Error saving plant');
      });
});